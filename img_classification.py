# -*- coding: utf-8 -*-
"""img_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9b0m7hTTr-d0o3Q-iRdoHg8n6FhqjF4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing import image
from google.colab import drive
import os
from tensorflow.keras.preprocessing.image import ImageDataGenerator

drive.mount('/content/gdrive', force_remount=True)

home_dir = '/content/gdrive/MyDrive/Colab Notebooks/image_classification/'

train_img_dir = os.path.join(home_dir,'images/images')
test_img_dir = os.path.join(home_dir,'test/test/classify')
val_img_dir = os.path.join(home_dir,'validation/validation')

architecture_dir = os.path.join(train_img_dir, 'architecture')
art_culture_dir = os.path.join(train_img_dir, 'art and culture')
foods_drinks_dir = os.path.join(train_img_dir, 'foods and drinks')
travel_adv_dir = os.path.join(train_img_dir, 'travel and adventure')



training_datagen = ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')

validation_datagen = ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')

test_datagen = ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')

train_generator = training_datagen.flow_from_directory(
	train_img_dir,
	target_size=(256,256),
	class_mode='categorical',
  batch_size=176
)

validation_generator = validation_datagen.flow_from_directory(
	val_img_dir,
	target_size=(256,256),
	class_mode='categorical',
  batch_size=176
)

test_generator = test_datagen.flow_from_directory(
	test_img_dir,
	target_size=(256,256),
	class_mode='categorical',
  batch_size=176
)

def create_model():
  model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(256, 256, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),

    tf.keras.layers.Flatten(),
    #tf.keras.layers.Dropout(0.5),
  
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')
])

  model.compile(loss = 'categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])

  return model

model = create_model()
model.summary()

checkpoint_dir = os.path.join(home_dir,"model_img_classifier.ckpt")

cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_dir,
                                                 save_weights_only=True,
                                                 verbose=1)

model.fit(train_generator, 
          epochs=30, 
          steps_per_epoch=15, 
          validation_data = validation_generator, 
          verbose = 1,
          callbacks=[cp_callback])

model.save_weights(f'{home_dir}/img_classifier.h5', overwrite=True)

#Retraining the model as it seems the model could be better if retrained for some other epochs

new_model = create_model()
new_model.load_weights(f'{home_dir}/img_classifier.h5')

checkpoint_dir = os.path.join(home_dir,"new_model_img_classifier.ckpt")

cp_callback = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_dir,
                                                 save_weights_only=False,
                                                 verbose=1)

new_model = new_model.fit(train_generator, 
          epochs=30, 
          steps_per_epoch=15, 
          validation_data = validation_generator, 
          verbose = 1,
          callbacks=[cp_callback])

new_model.save_model(f'{home_dir}/new_img_classifier.h5', overwrite=True)

def plot_model_performance(model, metric):
    plt.plot(model.history[metric])
    plt.plot(model.history[f'val_{metric}'])
    plt.xlabel('Epochs')
    plt.ylabel(metric)
    plt.legend([metric, f'val_{metric}'])
    plt.show()


plot_model_performance(new_model, 'accuracy')
plot_model_performance(new_model, 'loss')

new_model = create_model()
new_model.load_weights('/content/gdrive/MyDrive/Colab Notebooks/image_classification/img_classifier.h5')

from tensorflow.keras.preprocessing import image
from tensorflow.keras.utils import load_img, img_to_array

for i in os.listdir(test_img_dir):
  img = load_img(f'{test_img_dir}/{i}', target_size=(256, 256))
  x = img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  prediction = new_model.predict(images, batch_size=10)
  print(img)
  print(prediction)

